# Generated from Expr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,160,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,4,6,61,8,6,11,6,12,6,62,1,7,1,7,1,8,1,8,1,9,
        1,9,1,9,1,9,1,9,3,9,74,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,107,8,
        14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
        17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,4,19,133,
        8,19,11,19,12,19,134,1,20,4,20,138,8,20,11,20,12,20,139,1,20,1,20,
        5,20,144,8,20,10,20,12,20,147,9,20,1,21,4,21,150,8,21,11,21,12,21,
        151,1,22,4,22,155,8,22,11,22,12,22,156,1,22,1,22,0,0,23,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,1,0,7,2,0,10,
        10,13,13,2,0,43,43,45,45,2,0,42,42,47,47,2,0,60,60,62,62,1,0,48,
        57,2,0,65,90,97,122,2,0,9,9,32,32,168,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,1,47,1,0,0,0,3,49,1,0,0,0,5,51,1,0,0,0,7,53,1,0,0,0,9,55,
        1,0,0,0,11,57,1,0,0,0,13,60,1,0,0,0,15,64,1,0,0,0,17,66,1,0,0,0,
        19,73,1,0,0,0,21,75,1,0,0,0,23,81,1,0,0,0,25,86,1,0,0,0,27,92,1,
        0,0,0,29,106,1,0,0,0,31,108,1,0,0,0,33,117,1,0,0,0,35,120,1,0,0,
        0,37,125,1,0,0,0,39,132,1,0,0,0,41,137,1,0,0,0,43,149,1,0,0,0,45,
        154,1,0,0,0,47,48,5,40,0,0,48,2,1,0,0,0,49,50,5,41,0,0,50,4,1,0,
        0,0,51,52,5,123,0,0,52,6,1,0,0,0,53,54,5,125,0,0,54,8,1,0,0,0,55,
        56,5,44,0,0,56,10,1,0,0,0,57,58,5,61,0,0,58,12,1,0,0,0,59,61,7,0,
        0,0,60,59,1,0,0,0,61,62,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,14,
        1,0,0,0,64,65,7,1,0,0,65,16,1,0,0,0,66,67,7,2,0,0,67,18,1,0,0,0,
        68,69,5,61,0,0,69,74,5,61,0,0,70,71,5,33,0,0,71,74,5,61,0,0,72,74,
        7,3,0,0,73,68,1,0,0,0,73,70,1,0,0,0,73,72,1,0,0,0,74,20,1,0,0,0,
        75,76,5,112,0,0,76,77,5,114,0,0,77,78,5,105,0,0,78,79,5,110,0,0,
        79,80,5,116,0,0,80,22,1,0,0,0,81,82,5,114,0,0,82,83,5,101,0,0,83,
        84,5,97,0,0,84,85,5,100,0,0,85,24,1,0,0,0,86,87,5,116,0,0,87,88,
        5,111,0,0,88,89,5,105,0,0,89,90,5,110,0,0,90,91,5,116,0,0,91,26,
        1,0,0,0,92,93,5,116,0,0,93,94,5,111,0,0,94,95,5,114,0,0,95,96,5,
        101,0,0,96,97,5,97,0,0,97,98,5,108,0,0,98,28,1,0,0,0,99,100,5,105,
        0,0,100,101,5,110,0,0,101,107,5,116,0,0,102,103,5,114,0,0,103,104,
        5,101,0,0,104,105,5,97,0,0,105,107,5,108,0,0,106,99,1,0,0,0,106,
        102,1,0,0,0,107,30,1,0,0,0,108,109,5,102,0,0,109,110,5,117,0,0,110,
        111,5,110,0,0,111,112,5,99,0,0,112,113,5,116,0,0,113,114,5,105,0,
        0,114,115,5,111,0,0,115,116,5,110,0,0,116,32,1,0,0,0,117,118,5,105,
        0,0,118,119,5,102,0,0,119,34,1,0,0,0,120,121,5,101,0,0,121,122,5,
        108,0,0,122,123,5,115,0,0,123,124,5,101,0,0,124,36,1,0,0,0,125,126,
        5,119,0,0,126,127,5,104,0,0,127,128,5,105,0,0,128,129,5,108,0,0,
        129,130,5,101,0,0,130,38,1,0,0,0,131,133,7,4,0,0,132,131,1,0,0,0,
        133,134,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,40,1,0,0,0,136,
        138,7,4,0,0,137,136,1,0,0,0,138,139,1,0,0,0,139,137,1,0,0,0,139,
        140,1,0,0,0,140,141,1,0,0,0,141,145,5,46,0,0,142,144,7,4,0,0,143,
        142,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,
        42,1,0,0,0,147,145,1,0,0,0,148,150,7,5,0,0,149,148,1,0,0,0,150,151,
        1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,44,1,0,0,0,153,155,7,
        6,0,0,154,153,1,0,0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,157,1,
        0,0,0,157,158,1,0,0,0,158,159,6,22,0,0,159,46,1,0,0,0,9,0,62,73,
        106,134,139,145,151,156,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    NEWLINE = 7
    ADDSUBSIGN = 8
    MULDIVSIGN = 9
    COND_OP = 10
    PRINT = 11
    READ = 12
    TOINT = 13
    TOREAL = 14
    TYPE = 15
    FUNCTION = 16
    IF = 17
    ELSE = 18
    WHILE = 19
    INT = 20
    REAL = 21
    ID = 22
    WS = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "','", "'='", "'print'", "'read'", 
            "'toint'", "'toreal'", "'function'", "'if'", "'else'", "'while'" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "ADDSUBSIGN", "MULDIVSIGN", "COND_OP", "PRINT", "READ", 
            "TOINT", "TOREAL", "TYPE", "FUNCTION", "IF", "ELSE", "WHILE", 
            "INT", "REAL", "ID", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "NEWLINE", 
                  "ADDSUBSIGN", "MULDIVSIGN", "COND_OP", "PRINT", "READ", 
                  "TOINT", "TOREAL", "TYPE", "FUNCTION", "IF", "ELSE", "WHILE", 
                  "INT", "REAL", "ID", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


